########################################
# Helper jobs
########################################

# The image used is responsible for defining CC and CCX to the right compiler or
# similar on windows / darwin
.BuildVariantBase: &BuildVariantBase
  extends:
    - .2-Build:rules:BuildVariantBase
  variables:
    IMAGE_VARIANT: ${CI_JOB_NAME} # Default image variant is the name of the job that inherited this job
    BUILD_TYPE:    Release
  image: ${LOCAL_CI_IMAGE_REPO}/ci:${IMAGE_VARIANT}
  stage: 2-Build
  script:
    # If you want to use a specific compiler you might want to set CC and CXX
    # TODO(Etienne M): Use cmake toolset ?
    - mkdir -p build/${IMAGE_VARIANT}.${BUILD_TYPE}
    - cd       build/${IMAGE_VARIANT}.${BUILD_TYPE}
    - cmake -G Ninja -DPILG_BUILD_USECASE=OFF -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DPILG_FIXED_PACKAGE_NAME=ON -DPILG_GIT_SUBMODULE=OFF -DPILG_TEST_WORKDIR=".." ../..
    - ninja
    # Compress before gitlab artifact compression to avoid faulty size limit check (test the size before compression and not after, thus can reject something large that compresses well).
    - 7z a arch.7z *
    - find . ! -name '*.7z' -type f -exec rm -f {} +
  artifacts:
    paths:
      - build/${IMAGE_VARIANT}.${BUILD_TYPE}
    expire_in: 120 mins


########################################
# Build variants
########################################

# Used for the tests and coverage (we test in Debug and Release !)
Debug for tests and coverage:
  extends:
    - .BuildVariantBase
  variables:
    IMAGE_VARIANT: build.amd64.linux.gcc # We NEED a linux gcc build for the coverage
    BUILD_TYPE:    Debug                 # For coverage we rather use Debug for increased accuracy

build.amd64.linux.gcc:     *BuildVariantBase
# build.amd64.linux.clang:   *BuildVariantBase
# build.amd64.windows.clang: *BuildVariantBase # Will requiere some tweaks to the base
# build.amd64.darwin.clang:  *BuildVariantBase

# build.arm.linux.gcc:   *BuildVariantBase
# build.arm.linux.clang: *BuildVariantBase

# build.arm64.linux.gcc:    *BuildVariantBase
# build.arm64.linux.clang:  *BuildVariantBase
# build.arm64.darwin.clang: *BuildVariantBase
