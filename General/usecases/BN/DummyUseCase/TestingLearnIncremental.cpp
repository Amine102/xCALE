#include "TestingLearnIncremental.h"
#include "HelperFunctions.h"
#include "learnDummy.h"
#include <algorithm>
#include <fstream>
#include <iterator>
#include <string>
#include <vector>

using namespace std;
using namespace PILGRIM;

/*
---------------------------WARNING--------------------------
Please make sure to run createDummy1.cpp before running this file
The incremental learning is trying to learn the BN of Dummy1 and
*/
void TestingLearnIncremental()
{
    //Learn the graph parameters from the entire data (Non-incremental)
    learnDummy();
    /* 
    ================================================================================================================================
    */
    cout << "Starting Splitting the data and the incremental Learning process using the divided data" << endl;
    //Split the data generated by the create method to 10 files.
    int numberOfParts = GetNumberOfSplitsFromUser();
    if (numberOfParts == -1)
    {
        return;
    }
    string datafile = "../../benchmarks/data/Dummy1_csv.data";
    splitData(datafile, numberOfParts);
    /* 
    ================================================================================================================================
    */

    bool changingForgettingFactor = AskUserIfChangingForgetFactor();

    /* 
    ================================================================================================================================
    */
    double ff;
    if (changingForgettingFactor == false)
    {
        ff = getForgettingFactorFromUser();
    }
    else
    {
        cout << "The ForgettingFactor will be initialized to 0.5" << endl;
        ff = 0.5;
    }

    /* 
    ================================================================================================================================
    */
    /*
    Beginning by learning all the data non-incrementally
    */
    pmBayesianNetwork bnDummy;
    size_t window_size = 1;
    size_t numberOfColumns = 5;
    plVariablesConjunction vars;
    pmCSVDataSet *data;

    for (int i = 0; i < numberOfParts; i++)
    {
        string df = datafile + to_string(i) + ".data";
        char *data_file = strcpy(new char[df.length() + 1], df.c_str());

        if (changingForgettingFactor == true)
        {
            ff = (double)i / (double)(i + 1);
        }

        if (i == 0)
        {
            data = new pmCSVDataSet(data_file);
            vars = data->observed_variables();
            bnDummy = pmBayesianNetwork(vars);
            pmBayesianNetwork bnDummyTemp("../../benchmarks/networks/jdBnDummy1.xml", "jdDummy");
            bnDummy.copy_structure(bnDummyTemp);
        }
        else
        {
            data = new pmCSVDataSet(data_file, window_size, numberOfColumns, ';', vars);
        }

        bnDummy.setForgettingFactor(ff);
        bnDummy.learnParameters(data);
        bnDummy.save_as_xml("../../benchmarks/networks/lpBnDummy.xml", "lpBnDummy");
        cout << " i is " << i << endl;
        bnDummy.summary();
        exportVectorOfProba(bnDummy.getComputableObjectList(), "P(A)", i);
    }
    pmBayesianNetwork bnDummy_final("../../benchmarks/networks/lpBnDummy.xml", "lpBnDummy");
    bnDummy_final.summary();
}
