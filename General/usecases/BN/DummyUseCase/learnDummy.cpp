//TOMORROWs work --> split the data to file 1 and file2. learn the data from file1 and learn incremental data from file2.
//LearnIncremental should take the structure and the parameters of the model generated by learnparameters not incrementally
#include "learnDummy.h"
#include <algorithm>

using namespace std;
using namespace PILGRIM;

void learnDummy()
{
    string file1, file2;

    auto splitData = [&](string data_file, int numberOfParts = 2) -> void {
        ifstream file_temp(data_file);
        string value;
        // string file1,file2;

        cout << "get number of lines" << endl;
        string l;
        int c = 0;
        while (getline(file_temp, l))
            c++;

        int file_length = c;
        int file1_length = file_length / numberOfParts;
        int file2_length = file_length - file1_length;
        cout << "file length " << file_length << endl;
        cout << "file1 length " << file1_length << endl;
        cout << "file2 length " << file2_length << endl;
        int i = 0;
        // file.good() --> Returns true if none of the stream's error state flags (eofbit, failbit and badbit) is set.
        ifstream file(data_file);
        while (file.good())
        {
            getline(file, value);
            if (i == 0)
            {
                file1 += (string(value)+"\n");
                file2 += (string(value)+"\n");
            }
            else if (i <= file1_length)
            {
                file1 += (string(value)+"\n");
            }
            else
            {
                file2 += (string(value)+"\n");
            }
            i++;
        }
        // cout<<"file1 is "<<file1<<endl;
        // cout<<"file2 is "<<file2<<endl;
        ofstream f1;
        f1.open("../../benchmarks/data/Dummy1_csv_file1.data");
        f1 << file1;
        f1.close();

        ofstream f2;
        f2.open("../../benchmarks/data/Dummy1_csv_file2.data");
        f2 << file2;
        f2.close();
        cout<<"finished"<<endl;
    };
    
    //Split the data generated by the create method to 2 files. 
    splitData("../../benchmarks/data/Dummy1_csv.data");
    // Learning with file 1
    char *data_file = "../../benchmarks/data/Dummy1_csv_file1.data";
    pmCSVDataSet *data = new pmCSVDataSet(data_file);
    cout<<"finished loading the data"<<endl;

    plVariablesConjunction vars = data->observed_variables();

    //Print & export
    cout << "Network summary : " << endl;
    data->summary();

    pmBayesianNetwork bnDummy(vars);
    pmBayesianNetwork bnDummyTemp("../../benchmarks/networks/jdBnDummy1.xml", "jdDummy");
    bnDummy.copy_structure(bnDummyTemp);

    bnDummy.learnParameters(data);
    cout << "Bayesian network learned using default ML and complete data" << endl;
    bnDummy.summary();
    cout << "lpBnDummy.xml generated in benchmarks/networks/ " << endl;
    bnDummy.save_as_xml("../../benchmarks/networks/jdBnDummy1.xml", "jdDummy");
}