#include "learnParametersWeather.h"
#include <algorithm>

using namespace std;
using namespace PILGRIM;
/**
 * \brief Load the BN created in 'createWeather.cpp', in xml.
 * Load the data set created in 'createWeather.cpp' in csv.data
 * Split it in two new files and learn BN's parameters using 
 * the new method (incrementation on data) using the first splitted file.
 * Save it as xml file
 */
void learnParametersWeather() {

  //code from learnDummy.cpp
  string file1, file2;

  auto splitData = [&](string data_file, int numberOfParts = 2) -> void {
    ifstream file_temp(data_file);
    string value;
    // string file1,file2;

    cout << "get number of lines" << endl;
    string l;
    int c = 0;
    while (getline(file_temp, l)){
        c++;
    }
    int file_length = c;
    int file1_length = file_length / numberOfParts;
    int file2_length = file_length - file1_length;
    cout << "file length " << file_length << endl;
    cout << "file1 length " << file1_length << endl;
    cout << "file2 length " << file2_length << endl;
    int i = 0;
    // file.good() --> Returns true if none of the stream's error state flags (eofbit, failbit and badbit) is set.
    ifstream file(data_file);
    while (file.good())
    {
        getline(file, value);
        if (i == 0)
        {
            file1 += (string(value)+"\n");
            file2 += (string(value)+"\n");
        }
        else if (i <= file1_length)
        {
            file1 += (string(value)+"\n");
        }
        else
        {
            file2 += (string(value)+"\n");
        }
        i++;
    }
    // cout<<"file1 is "<<file1<<endl;
    // cout<<"file2 is "<<file2<<endl;
    ofstream f1;
    f1.open("../../benchmarks/data/Weather_csv_file1.data");
    f1 << file1;
    f1.close();
    ofstream f2;
    f2.open("../../benchmarks/data/Weather_csv_file2.data");
    f2 << file2;
    f2.close();
    cout<<"finished"<<endl;
  };

  //Split the data generated by the create method to 2 files. 
  splitData("../../benchmarks/data/Weather_csv.data"); 


  // Learning with file 1
  //Load data
  string path_to_data= "../../benchmarks/data/Weather_csv_file1.data";
  char *data_file = new char[path_to_data.length() +1];
  strcpy(data_file, path_to_data.c_str());

  ///////////////////////////////////
  // to use with learnParametersWeatherIncremental.cpp
  pmCSVDataSet* data = new pmCSVDataSet(data_file);
    
  plVariablesConjunction vars = data->observed_variables();

  //Print & export
  cout << "Network summary : " << endl;
  data->summary();
  
  pmBayesianNetwork bnWeather(vars);
  pmBayesianNetwork bnWeatherTemp("../../benchmarks/networks/jdBnWeather.xml", "jdBnWeather");

  /////////////////////////////////////////////
  bnWeather.copy_structure(bnWeatherTemp);

  bnWeather.learnParameters(data);
  cout << "Bayesian network learned using default ML and complete data" << endl;
  bnWeather.summary();
  ///////////////////////////////////////////
  cout << "lpBnWeather.xml generated in benchmarks/networks/ " << endl;
  bnWeather.save_as_xml("../../benchmarks/networks/lpBnWeather.xml", "lpBnWeather");
}
